
 HTTP (HyperText Transport Protocol) -- the basics for web sites and services

 # For web sockets, we'll be looking at TCP (Transmission Control Protocol) proctocol. First, though, it's HTTP.
 
   ## Other protocols, e.g., SMTP (Simple Mail Transport Protocol) for email, may come into play at the API level,
      but Tomcat is not an email server.

 # HTTP is a messaging protocol, built atop TCP (Transmission Control Protocol)

   ## Two basic types of message: request and response

   Depiction:

      Various request 'methods', including: POST (Create), GET (Read), PUT (Update, Delete (Delete): CRUD ops
                  /
             request message
      client----------------->server

      ## URLs typed into the browser's input box, or clicked hyperlinks, typically generate GET requests.

      ## Forms submitted from a browser typically generate POST requests.

      ## Modern browsers do GET and POST only.

      ## Modern web services, which are typically hit by programs other than browsers, are 'RESTful'
         in that they support all four CRUD operations.
	 
      
             response message
      client<-----------------server
      
-----------------------------------------------      

   Richer depiction with URL 'http://localhost:8080/greet/hello.html' ## URI is '/greet/hello.html', method is GET

                                                              'Create' 'Read' 'Update' 'Delete' ## CRUD operations
                                                                   \      |    /        /
        requires a URI ('noun') and an HTTP method ('verb' such as POST, GET, PUT, or DELETE)
                      \
               request message    +-----------------------+
       client-------------------->| HTTP-compliant server |   ## verb is GET, noun is /greet/hello.html
          /                       +-----------------------+   ## Operation: Read the 'hello' page
   perhaps a browser as the 'user agent'


               response message   +-----------------------+
       client<--------------------| HTTP-compliant server |   ## a server responds to a request
                                  +-----------------------+   ## Response is the embedded 'hello' page 

   ## HTTP is often described as 'stateless', but does contain mechanisms (e.g., cookies and other
      'header elements') to manage state.

   ## In general, it's the web app that maintains 'state' among requests and responses in order to
      support a multi-message conversation.

      ### Tomcat (through the Catalina component) provides mechanisms such as the 'session map' to help
          the programmer maintain state.
  
 # Format of requests/responses

    HTTP request:

       start line   ## HTTP_method URI [HTTP version]        E.g.: POST /skiServ/dataVerifier HTTP/1.1
       headers      ## Key/value pairs, with : as separator  E.g.: Content-Type: application/x-www-form-urlencoded
       newline
       newline
       [body]       ## GET and DELETE have no body; POST and PUT have a body

    HTTP response:      

       start line   ## [HTTP version] Status code (numeric and English)  E.g.: 200 OK
       headers      ## Key/value pairs, with : as separator              E.g.: Server: Apache-Coyote/1.1
       newline
       newline
       body         ## For instance, an HTML page

